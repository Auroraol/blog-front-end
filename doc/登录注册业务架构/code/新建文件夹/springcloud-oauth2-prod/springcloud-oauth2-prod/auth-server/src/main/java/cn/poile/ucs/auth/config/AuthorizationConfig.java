package cn.poile.ucs.auth.config;import cn.poile.ucs.auth.granter.MobileCodeTokenGranter;import cn.poile.ucs.auth.response.ApiOauthTokenResponse;import cn.poile.ucs.auth.service.impl.SysClientServiceImpl;import cn.poile.ucs.auth.service.impl.SysUserServiceImpl;import cn.poile.ucs.auth.vo.UserDetailImpl;import lombok.extern.log4j.Log4j2;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Primary;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;import org.springframework.security.oauth2.provider.CompositeTokenGranter;import org.springframework.security.oauth2.provider.OAuth2Authentication;import org.springframework.security.oauth2.provider.OAuth2Request;import org.springframework.security.oauth2.provider.TokenGranter;import org.springframework.security.oauth2.provider.code.AuthorizationCodeServices;import org.springframework.security.oauth2.provider.code.AuthorizationCodeTokenGranter;import org.springframework.security.oauth2.provider.implicit.ImplicitTokenGranter;import org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter;import org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter;import org.springframework.security.oauth2.provider.token.AuthenticationKeyGenerator;import org.springframework.security.oauth2.provider.token.DefaultTokenServices;import org.springframework.security.oauth2.provider.token.TokenEnhancer;import org.springframework.security.oauth2.provider.token.TokenStore;import org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;import java.math.BigInteger;import java.nio.charset.StandardCharsets;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.ArrayList;import java.util.List;import java.util.concurrent.TimeUnit;/** * 认证配置 * @author: yaohw * @create: 2019-09-30 16:12 **/@Log4j2@Configuration@EnableAuthorizationServerpublic class AuthorizationConfig extends AuthorizationServerConfigurerAdapter {    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private SysUserServiceImpl userDetailsService;    @Autowired    private SysClientServiceImpl clientDetailsService;    @Autowired    private RedisConnectionFactory redisConnectionFactory;    @Autowired    private RedisTemplate<String, Object> redisTemplate;    /**     * 自定义token唯一key     * @return AuthenticationKeyGenerator     */    private AuthenticationKeyGenerator keyGenerator() {        return new AuthenticationKeyGenerator() {            /**             * @param authentication an OAuth2Authentication             * @return a unique key identifying the authentication             */            @Override            public String extractKey(OAuth2Authentication authentication) {                OAuth2Request oAuth2Request = authentication.getOAuth2Request();                String clientId = oAuth2Request.getClientId();                UserDetailImpl principal = (UserDetailImpl)authentication.getPrincipal();                String value = principal.getId() + clientId;                MessageDigest digest;                try {                    digest = MessageDigest.getInstance("MD5");                    byte[] bytes = digest.digest(value.getBytes(StandardCharsets.UTF_8));                    return String.format("%032x", new BigInteger(1, bytes));                } catch (NoSuchAlgorithmException nsae) {                    throw new IllegalStateException("MD5 algorithm not available.  Fatal (should be in the JDK).", nsae);                }            }        };    }    /**     * 配置token存储，这个配置token存到redis中     * @return tokenStore     */    @Bean    public TokenStore tokenStore() {        RedisTokenStore redisTokenStore = new RedisTokenStore(redisConnectionFactory);        redisTokenStore.setAuthenticationKeyGenerator(keyGenerator());        return redisTokenStore;    }    /**     * 配置授权码模式授权码服务,不配置默认为内存模式     * @return     */    @Primary    @Bean    public AuthorizationCodeServices authorizationCodeServices() {        return new RedisAuthorizationCodeServices(redisConnectionFactory);    }    /**     * 配置客户端详情     * @param clients     * @throws Exception     */    @Override    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {        clients.withClientDetails(clientDetailsService);    }    @Override    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {                // 配置token存储，一般配置redis存储                endpoints.tokenStore(tokenStore())                        // 自定义token                        .tokenEnhancer(tokenEnhancer())                // 配置认证管理器                .authenticationManager(authenticationManager)                // 配置用户详情server，密码模式必须                .userDetailsService(userDetailsService)                // 配置授权码模式授权码服务,不配置默认为内存模式                .authorizationCodeServices(authorizationCodeServices())                // 配置grant_type模式，如果不配置则默认使用密码模式、简化模式、验证码模式以及刷新token模式，如果配置了只使用配置中，默认配置失效                // 具体可以查询AuthorizationServerEndpointsConfigurer中的getDefaultTokenGranters方法                .tokenGranter(tokenGranter(endpoints));        // 配置TokenServices参数        DefaultTokenServices tokenServices = new DefaultTokenServices();        tokenServices.setTokenStore(endpoints.getTokenStore());        // 是否支持刷新Token        tokenServices.setSupportRefreshToken(true);        tokenServices.setReuseRefreshToken(true);        tokenServices.setClientDetailsService(endpoints.getClientDetailsService());        tokenServices.setTokenEnhancer(endpoints.getTokenEnhancer());        // 设置accessToken和refreshToken的默认超时时间(如果clientDetails的为null就取默认的，如果clientDetails的不为null取clientDetails中的)        tokenServices.setAccessTokenValiditySeconds((int) TimeUnit.HOURS.toSeconds(2));        tokenServices.setRefreshTokenValiditySeconds((int) TimeUnit.DAYS.toSeconds(30));        endpoints.tokenServices(tokenServices);        endpoints.exceptionTranslator(new ExceptionHandle());    }    @Override    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {        security                .allowFormAuthenticationForClients()                .tokenKeyAccess("isAuthenticated()")                .checkTokenAccess("permitAll()");    }    /**     * 返回的token自定义化     *     * @return     */    @Bean    public TokenEnhancer tokenEnhancer() {        return (accessToken, authentication) -> new ApiOauthTokenResponse(accessToken);    }    /**     * 创建grant_type列表     * @param endpoints     * @return     */    @Bean    public TokenGranter tokenGranter(AuthorizationServerEndpointsConfigurer endpoints) {        List<TokenGranter> list = new ArrayList<>();        // 这里配置密码模式、刷新token模式、自定义手机号验证码模式、授权码模式、简化模式        list.add(new ResourceOwnerPasswordTokenGranter(authenticationManager, endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));        list.add(new RefreshTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));        list.add(new MobileCodeTokenGranter(authenticationManager,endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));        list.add(new AuthorizationCodeTokenGranter(endpoints.getTokenServices(),endpoints.getAuthorizationCodeServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory()));        list.add(new ImplicitTokenGranter(endpoints.getTokenServices(),endpoints.getClientDetailsService(),endpoints.getOAuth2RequestFactory()));        return new CompositeTokenGranter(list);    }}